{"version":3,"sources":["images/hacktoberfest.svg","images/siligong.png","theme.ts","GlobalStyles.ts","components/Header.tsx","components/Logo.tsx","features/Header.tsx","components/Section.tsx","components/Link.tsx","features/Welcome.tsx","features/Sponsors.tsx","components/ThemeToggle.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","dark","theme","color","background","link","linkHover","spacing","light","mode","GlobalStyle","createGlobalStyle","styledNormalize","p","Header","styled","header","LogoImage","img","Logo","title","image","hero","href","target","rel","src","alt","hacktoberfest","siligong","Section","section","A","a","Link","children","props","WelcomeSection","ThemeToggleLink","button","css","themeEmoji","ThemeToggle","toggleTheme","onClick","App","localTheme","window","localStorage","getItem","initialTheme","matchMedia","matches","useState","setTheme","getTheme","nextTheme","setItem","GlobalStyles","Welcome","Sponsors","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c379b147.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hacktoberfest.00a9aabe.svg\";","module.exports = __webpack_public_path__ + \"static/media/siligong.7c63af93.png\";","export type ThemeType = {\n  theme: {\n    color: string,\n    background: string,\n    link: string,\n  }\n};\n\nexport const dark = {\n  theme: {\n    color: '#D5EBF2',\n    background: '#152347',\n    link: '#FFF34E',\n    linkHover: '#D110B8',\n    spacing: '1rem',\n  },\n};\n\nexport const light = {\n  theme: {\n    color: '#152347',\n    background: '#D5EBF2',\n    link: '#4B57EA',\n    linkHover: '#69BE5A',\n    spacing: '1rem',\n  },\n};\n\nexport type ThemeMode = 'light' | 'dark';\nconst theme = (mode: ThemeMode) => mode === 'dark' ? dark.theme : light.theme;\n\nexport default theme\n","import styledNormalize from 'styled-normalize';\nimport { createGlobalStyle } from 'styled-components';\nimport { ThemeType } from './theme';\n\nconst GlobalStyle = createGlobalStyle<ThemeType>`\n  ${styledNormalize};\n\n  *,\n  *::after,\n  *::before {\n    box-sizing: border-box;\n  }\n\n  body {\n    align-items: center;\n    background: ${p => p.theme.background};\n    color: ${p => p.theme.color};\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    min-height: 100vh;\n    margin: 0;\n    padding: 0;\n    font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\n    transition: all 0.25s linear;\n  }\n`;\n\nexport default GlobalStyle;\n","import styled from 'styled-components';\n\nconst Header = styled.header`\n  padding: ${p => p.theme.spacing};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  @media (min-width: 720px) {\n    flex-direction: row;\n  }\n\n  a {\n    display: block;\n    margin: ${p => p.theme.spacing};\n\n    &:hover {\n      img {\n        transform: scale(1.1) rotate(15deg);\n      }\n    }\n  }\n\n  img {\n    height: 20rem;\n    width: 20rem;\n    max-width: 100%;\n    transition: 0.3s;\n  }\n`;\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport type LogoImageProps = {\n  hero?: boolean;\n};\n\nexport const LogoImage = styled.img<LogoImageProps>`\n  width: 2vw;\n  border: 0;\n`;\n\nexport type LogoProps = {\n  title: string,\n  link: string,\n  image: string,\n  hero?: boolean,\n};\n\nconst Logo = ({ title, link, image, hero }: LogoProps) => (\n  <a\n    href={link}\n    title={title}\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n  >\n    <LogoImage src={image} alt={title} hero={hero} />\n  </a>\n);\n\nexport default Logo;\n","import React from 'react';\nimport Header from '../components/Header';\nimport Logo from '../components/Logo';\nimport hacktoberfest from '../images/hacktoberfest.svg';\nimport siligong from '../images/siligong.png';\n\nexport default () => (\n  <Header>\n    <Logo\n      title=\"Hacktoberfest\"\n      image={hacktoberfest}\n      link=\"https://hacktoberfest.digitalocean.com\"\n      hero\n    />\n    <Logo\n      title=\"Siligong Valley\"\n      image={siligong}\n      link=\"https://www.siligongvalley.com\"\n      hero\n    />\n  </Header>\n);\n","import styled from 'styled-components';\n\nconst Section = styled.section`\n  padding: ${p => p.theme.spacing};\n  width: 100%;\n  max-width: 1280;\n  margin: 0 auto;\n`;\n\nexport default Section;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport const A = styled.a`\n  color: ${p => p.theme.link};\n  transition: 0.3s;\n\n  &:hover {\n    color: ${p => p.theme.linkHover}\n  }\n`;\n\nexport type LinkType = {\n  href: string,\n  children: React.ReactChild,\n};\n\nconst Link = ({ href, children, ...props }: LinkType) => (\n  <A\n    href={href}\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    {...props}\n  >\n    {children}\n  </A>\n);\n\nexport default Link;","import React from 'react';\nimport Section from '../components/Section';\nimport Link from '../components/Link';\nimport styled from 'styled-components';\n\nconst WelcomeSection = styled(Section)`\n  text-align: center;\n`;\n\nexport default () => (\n  <WelcomeSection>\n    <h1>\n      Welcome to\n      {' '}\n      <Link href=\"https://www.siligongvalley.com\">\n        SiligongValley\n      </Link>\n      {' '}\n      <Link href=\"https://hacktoberfest.digitalocean.com\">\n        #Hacktoberfest\n      </Link>\n      {' '}\n      2019\n  </h1>\n  </WelcomeSection>\n);","import React from 'react';\nimport Section from '../components/Section';\nimport Link from '../components/Link';\n\nexport default () => (\n  <Section>\n    <h2>Sponsors</h2>\n    <p>\n      A big thank you to <Link href=\"https://www.accelo.com/\">Accelo</Link> for\n      having us in their new Wollongong office and supplying pizza and drinks!\n    </p>\n  </Section>\n);\n","import React from 'react';\nimport { ThemeMode } from '../theme';\nimport styled, { css } from 'styled-components';\n\ntype Props = {\n  theme: ThemeMode,\n  toggleTheme: () => void,\n};\n\nconst ThemeToggleLink = styled.button`\n  display: block;\n  border: 2px solid ${p => p.theme.color};\n  background: ${p => p.theme.background};\n  border-radius: 0.75em;\n  text-decoration: none;\n  position: absolute;\n  top: ${p => p.theme.spacing};\n  right: ${p => p.theme.spacing};\n  cursor: pointer;\n  font-size: 2rem;\n  width: 2.5em;\n  padding: ${p => p.title === 'light theme' ? css`0 0 0 1em` : css`0 1em 0 0`};\n  transition: 0.3s;\n`;\n\nconst themeEmoji = {\n  light: 'ðŸ˜Ž',\n  dark: 'ðŸŒš'\n}\n\nconst ThemeToggle = ({ theme, toggleTheme }: Props) => (\n  <ThemeToggleLink onClick={toggleTheme} title={`${theme} theme`}>\n    {themeEmoji[theme]}\n  </ThemeToggleLink>\n);\n\nexport default ThemeToggle;","import React, { useState } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport getTheme, { ThemeMode } from './theme';\nimport GlobalStyles from './GlobalStyles';\n\nimport Header from './features/Header';\nimport Welcome from './features/Welcome';\nimport Sponsors from './features/Sponsors';\nimport ThemeToggle from './components/ThemeToggle';\n\nconst App: React.FC = () => {\n  const localTheme = window.localStorage.getItem('theme');\n  let initialTheme: ThemeMode =\n    window.matchMedia &&\n    window.matchMedia('(prefers-color-scheme: dark)').matches\n      ? 'dark'\n      : 'light';\n  if (localTheme === 'light' || localTheme === 'dark')\n    initialTheme = localTheme;\n\n  const [theme, setTheme] = useState<ThemeMode>(initialTheme);\n\n  const toggleTheme = () => {\n    const nextTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(nextTheme);\n    window.localStorage.setItem('theme', nextTheme);\n  };\n\n  return (\n    <ThemeProvider theme={getTheme(theme)}>\n      <div>\n        <ThemeToggle {...{ theme, toggleTheme }} />\n        <GlobalStyles />\n        <Header />\n        <Welcome />\n        <Sponsors />\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}